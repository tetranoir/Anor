{"version":3,"sources":["models/data.models.ts","utils/object.utils.ts","utils/string.utils.ts","models/client.models.ts","client/loaders/mapsToGraph.ts","components/ChampionImages.tsx","client/Aldia.tsx","client/loaders/dataToMaps.js","client/serviceWorker.js","client/index.js"],"names":["module","__webpack_require__","d","__webpack_exports__","keys","id","presi__WEBPACK_IMPORTED_MODULE_0__","Z","oneOf","literal","exports","isChampion","o","reduce","acc","key","Boolean","keyToUX","ary","getKey","val","index","cache","dataArray","keyFn","arrayHit","find","_ref","Object","slicedToArray","newIndex","push","cachedIndexes","indexHit","_ref3","Index","prop","p","R","Prop","counter","item","encodeStr","s","replace","urlParams","URLSearchParams","window","location","search","BooleanVal","deserialize","v","serialize","useClientState","_useState3","useState","_useState4","filtered","setFiltered","_useUrlState","name","Type","defaultValue","hasLoaded","_useState","has","get","_useState2","value","setValue","useEffect","delete","set","history","replaceState","concat","pathname","useUrlState","_useUrlState2","selected","setSelected","_useState5","_useState6","grouped","setGrouped","_useState7","_useState8","highlighted","setHighlighted","_useState9","_useState10","hovered","setHovered","pickStateVars","mapToReactVisForce","objs","maps","nodeProps","linkProps","nodes","map","props","node","radius","className","cx","labelClass","fill","hist","links","forEach","entries","_ref2","objMaps","values","i","length","src","source","j","tgt","target","lProps","rvfLink","link","ChampionImages","champions","react_default","a","createElement","Fragment","c","patternUnits","width","height","x","y","href","icon","S","d3","rawChampions","championsjson","rawSynergies","synergiesjson","cssColorFilter","gold","silver","bronze","undefined","getTraits","class","origin","linkDisplayRules","b","reduceToPicks","incChampions","incSynergies","Aldia","Date","now","assign","objectSpread2","short","toLowerCase","traits","_reduceToPicks","synsCount","flatMap","synergies","count","countThreshIdx","thresholds","threshIdx","thresh","min","max","Infinity","selectedSynergies","filter","championsByTrait","toggleSelectChampion","champion","setChampionHighlight","bool","sourceC","traitChampions","t","uniqTraitChampions","relatedChampions","_mapToReactVisForce","obj","m","k","defineProperty","renderedNodes","forceNode","react_vis_force","cloneElement","onMouseDown","onMouseOver","onMouseOut","navigationTopNodes","react_uwp","label","labelPosition","primaryCommands","style","pageTitle","displayMode","autoResize","initWidth","defaultExpanded","expandedWidth","focusNavigationNodeIndex","listSource","itemNode","padding","disabled","toConsumableArray","size","opacity","hoverStyle","color","onClick","title","marginLeft","listItemStyle","display","alignItems","_s$thresholds$s$count","margin","join","paddingRight","cost","showLabels","zoom","zoomOptions","maxScale","minScale","simulationOptions","radiusMargin","alphaDecay","innerHeight","innerWidth","forceLink","hostname","match","ReactDOM","render","Theme","theme","getTheme","themeName","accent","useFluentDesign","client_Aldia","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d3b247c.chunk.js","sourcesContent":["import {Z} from 'presi';\n\n// App model replicas in js\n\n// object keys properties\nexport const keys: SynergyType[] = ['class', 'origin'];\n\n// unique object property\nexport type Identity = 'name';\nexport const id: Identity = 'name';\nexport interface Identifiable {\n  name: string;\n}\n\n// champion interface (using object keys and object props)\nexport interface Champion {\n  class: string[];\n  origin: string[];\n  name: string;\n  cost: number;\n  icon: string;\n}\n\nexport function isChampion(o: any): o is Champion {\n  return keys.reduce((acc, key) => acc && Boolean(o[key]), true as boolean);\n};\n\nexport const SynergyType = Z.oneOf(Z.literal('class'), Z.literal('origin'));\nexport type SynergyType = ReturnType<typeof SynergyType>;\n\n// map of synergy name to synergy data\nexport interface SynergyMap {\n  [synergy: string]: Synergy;\n}\n\nexport interface SynergyTypeMap<T> {\n  [synergyType: string]: {\n    [synergy: string]: T;\n  }\n}\n\nexport type Threshold = {\n  style: string;\n  effect: string;\n  min: number;\n  max?: number;\n};\n\nexport interface Synergy {\n  name: string;\n  innate?: string;\n  description: string;\n  type: SynergyType;\n  thresholds: Threshold[];\n  icon: string;\n}\n\nexport interface Item {\n  name: string,\n  short?: string,\n  recipe?: string[],\n  effect: string,\n  icon?: string,\n}\n\n// checks for module exports for node\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = {\n    keys,\n    id,\n    isChampion,\n  };\n}","import * as R from 'ramda';\n\n// UX\nexport type UniqIndex<T> = {[k: string]: T};\n// IX\nexport type NonUniqIndex<T> = {[k: string]: T[]};\n\n// indexer function\n// object produces multiple keys, conflicting keys merged into array\nexport function multiKeyToIX<T>(ary: T[], getKey: (val: T) => string[]):\n    NonUniqIndex<T> {\n  return ary.reduce((acc, val) => {\n    const keys = getKey(val);\n    keys.forEach(key => {\n      if (!acc[key]) {\n         acc[key] = [];\n      }\n      acc[key].push(val);\n    });\n    return acc;\n  }, {} as NonUniqIndex<T>);\n}\n\n// indexer function\n// conflicting keys merged into array\nexport function keyToIX<T>(ary: T[], getKey: (val: T) => string):\n    NonUniqIndex<T> {\n  return ary.reduce((acc, val) => {\n    const key = getKey(val);\n    if (!acc[key]) {\n       acc[key] = [];\n    }\n    acc[key].push(val);\n    return acc;\n  }, {} as NonUniqIndex<T>);\n}\n\n// indexer function\n// no conflicting keys\nexport function keyToUX<T>(ary: T[],\n    getKey: (val: T) => string): UniqIndex<T> {\n  return ary.reduce((acc, val) => {\n    const key = getKey(val);\n    acc[key] = val;\n    return acc;\n  }, {} as  UniqIndex<T>);\n}\n\n/**\n * UNIQUE\n * Index creates an index with cache. It relies on the same list and function\n * to retrieve from cache.\n * How to use:\n *    const index = Index();\n *    const idfn = o => o.id;\n *    const objectById = index(objects, idfn);\n */\nexport function Index() {\n  // [ array, [fn, index] ]\n  const cache: [unknown[], [(a: any) => string, UniqIndex<any>][]][] = [];\n  // Cache of indexes. Uses array and function references\n  return function index<T>(dataArray: T[], keyFn: (val: T) => string): UniqIndex<T> {\n    const arrayHit = cache.find(([cachedArray, ]) => cachedArray === dataArray);\n    if (!arrayHit) {\n      const newIndex = keyToUX(dataArray, keyFn);\n      cache.push([dataArray, [[keyFn, newIndex]]]);\n      return newIndex;\n    }\n\n    const [, cachedIndexes] = arrayHit;\n    const indexHit = cachedIndexes.find(([cachedFn, ]) => cachedFn === keyFn);\n    if (!indexHit) {\n      const newIndex = keyToUX(dataArray, keyFn);\n      cachedIndexes.push([keyFn, newIndex]);\n      return newIndex;\n    }\n\n    const [, cachedIndex] = indexHit;\n    return cachedIndex;\n  }\n}\n\n// Global singleton Index\nexport const index = Index();\n\n// Cached R.prop\nexport function Prop() {\n  const cache: {[p: string]: (a: any) => any} = {};\n  return function prop(p: string) {\n    if (cache[p]) {\n      return cache[p];\n    }\n    return R.prop(p);\n  }\n}\n\n// Global singleton Prop\nexport const prop = Prop();\n\n// Count accumulator\nexport function counter(acc: {[item: string]: number}, item: string) {\n  if (!acc[item]) {\n    acc[item] = 0;\n  }\n  acc[item] += 1;\n  return acc;\n}\n","\n/** Removes all nonword characters from a string */\nexport function encodeStr(s: string) {\n  return s.replace(/[\\W]/g,'');\n}\n","import * as R from 'ramda';\nimport { useState, useEffect} from 'react';\n\nimport { Item, Threshold } from './data.models';\n\n/* Used as global singleton */\nconst urlParams = new URLSearchParams(window.location.search);\n/**\n * Only pulls from url state once, on load. But will continue to update url.\n * This is an optimzation requirement.\n */\nfunction useUrlState(name, Type, defaultValue) {\n  let hasLoaded = false;\n\n  const [value, setValue] = useState(\n    urlParams.has(name) ? Type.deserialize(urlParams.get(name)) : defaultValue\n  );\n\n  useEffect(() => {\n    if (!hasLoaded) return;\n\n    if (value === defaultValue) {\n      urlParams.delete(name);\n    } else {\n      urlParams.set(name, Type.serialize(value));\n    }\n    window.history.replaceState({}, '',\n        `${window.location.pathname}?${urlParams}`);\n  }, [value]);\n\n  hasLoaded = true;\n\n  return [value, setValue];\n}\n\nconst BooleanVal = {\n  deserialize(v: string): boolean {\n    return v === '1';\n  },\n  serialize(v: boolean): string {\n    return v ? '1' : '0';\n  },\n};\n\n// State handling in app\ninterface StateVars {\n  filtered: boolean;\n  selected: boolean;\n  grouped: boolean;\n  highlighted: boolean;\n  hovered: boolean;\n}\ninterface StateSets {\n  setFiltered: (b: boolean) => void;\n  setSelected: (b: boolean) => void;\n  setGrouped: (b: boolean) => void;\n  setHighlighted: (b: boolean) => void;\n  setHovered: (b: boolean) => void;\n}\n// Stateful properites of for interactable objects\nexport type ClientState = StateVars & StateSets;\n// // Attaches State functionality to object by mutating the original object\n// export function useClientState<T>(t: T & Partial<ClientStateUser>,\n//     id: string): T & ClientStateUser {\n//   const [filtered, setFiltered] = useState(false);\n//   const [selected, setSelected] = useUrlState(id, BooleanVal, false);\n//   const [grouped, setGrouped] = useState(false);\n//   const [highlighted, setHighlighted] = useState(false);\n//   const [hovered, setHovered] = useState(false);\n\n//   const state = {\n//     filtered,\n//     selected,\n//     grouped,\n//     highlighted,\n//     hovered,\n//     setFiltered,\n//     setSelected,\n//     setGrouped,\n//     setHighlighted,\n//     setHovered,\n//   };\n\n//   return Object.assign(t, {state});\n// }\n// Attaches State functionality to object by mutating the original object\nexport function useClientState(id: string): ClientState {\n  const [filtered, setFiltered] = useState(false);\n  const [selected, setSelected] = useUrlState(id, BooleanVal, false);\n  const [grouped, setGrouped] = useState(false);\n  const [highlighted, setHighlighted] = useState(false);\n  const [hovered, setHovered] = useState(false);\n\n  const state = {\n    filtered,\n    selected,\n    grouped,\n    highlighted,\n    hovered,\n    setFiltered,\n    setSelected,\n    setGrouped,\n    setHighlighted,\n    setHovered,\n  };\n\n  return state;\n}\n\n// Picks state props from an object\nexport const pickStateVars: (o: StateVars) => StateVars = R.pick([\n  'filtered',\n  'selected',\n  'grouped',\n  'highlighted',\n  'hovered',\n]);\n\nexport const mergeStateVars = (a: StateVars, b: StateVars): StateVars => ({\n  filtered: a.filtered && b.filtered,\n  selected: a.selected && b.selected,\n  grouped: a.grouped && b.grouped,\n  highlighted: a.highlighted && b.highlighted,\n  hovered: a.hovered && b.hovered,\n});\n\n// Enrichments are for functions, pointers, and derived state used in client\n// Adds stuff to synergy to make it easier to use\nexport interface SynergyEnrichment {\n  count: number;\n  countThreshIdx: number; // current thresh index\n}\n\nexport interface ItemEnrichment<T extends Item> {\n  // The items this item is in recipes for.\n  usedIn: T[];\n  // the items this item is made from.\n  madeFrom: T[];\n}\n\n\nexport interface ChampionEnrichment {\n  // Short name, lowercase using only word (\\w) characters. Used in URL\n  short: string;\n  // All traits\n  traits: string[];\n}\n","import cx from 'classnames/bind';\nimport * as R from 'ramda';\nimport * as ngraph from 'ngraph.graph';\n\nimport { NGraphGraph } from '../../types/ngraph';\nimport { encodeStr } from '../../utils';\n\n// if false, then hide. if true, then filter\nconst hideFilter = false;\n\nconst NGraph = ngraph as unknown as () => NGraphGraph;\n\n/// EXPORT from react-vis-force to ngraph\nexport const mapReactVisForceToNGraph = (fLinks: RVF_ForceLink[], graph = NGraph()) => {\n  fLinks.forEach(fLink => graph.addLink(fLink.link.source, fLink.link.target));\n  return graph;\n}\n\n\n/// EXPORT to react-vis-force\ntype HexColor = string;\ninterface RVF_ForceNode {\n  id: string;\n  node: RVF_Node;\n  cx?: number;\n  cy?: number;\n  r?: number;\n  className?: string;\n  labelClass?: string;\n  fill?: HexColor|string;\n  opacity?: number; // 0 - 1\n  stroke?: HexColor|string;\n  strokeWidth?: number; // in pixels\n  onMouseDown?: (e: MouseEvent) => void;\n  onMouseOver?: (e: MouseEvent) => void;\n  onMouseOut?: (e: MouseEvent) => void;\n}\ninterface RVF_ForceLink {\n  link: RVF_Link,\n  edgeOffset?: number;\n  strokeWidth?: number;\n  className?: string;\n  opacity?: number;\n  stroke?: HexColor;\n  pathLength?: number;\n  onMouseDown?: (e: MouseEvent) => void;\n  onMouseOver?: (e: MouseEvent) => void;\n  onMouseOut?: (e: MouseEvent) => void;\n}\ninterface RVF_Node {\n  id: string;\n  radius?: number;\n}\ninterface RVF_Link {\n  source: string;\n  target: string;\n  value?: number;\n}\ntype Identifiable<S extends string, T = {}> = Record<S, string> & T & {icon: string};\n/**\n * @param id       parameter that exists in T\n * @param objs     List of objects\n * @param maps.....Maps mappings of \"Keys\" to objects (TODO: deprecate in\n *                 favor of extracting this information from objs)\n * @param nodeProps Function that extracts properties from a T object\n * @param linkPRops Function that extracts properties from 2 T objects\n */\ntype mapToReactVisForce =\n  <S extends string, T, U extends Identifiable<S, T>> (\n    id: S,\n    objs: U[],\n    maps,\n    nodeProps: (o: T) => object,\n    linkProps: (a: T, b: T) => object,\n  ) => { nodes: RVF_ForceNode[], links: RVF_ForceLink[] };\nexport const mapToReactVisForce: mapToReactVisForce = (id, objs, maps, nodeProps, linkProps) => {\n  // creates nodes\n  const nodes: RVF_ForceNode[] = objs.map(o => {\n    const props = nodeProps(o);\n    const rvfNode = {\n      id: o[id],\n      node: {\n        id: o[id],\n        radius: 12,\n      },\n      className: cx('graph-node', props),\n      labelClass: cx('node-label', props),\n      fill: `url(#${encodeStr(o[id])}-img)`,\n      // fill: `url(${o.icon})`,\n      // fill: 'url(#myGradient)',\n    };\n    return rvfNode;\n  });\n\n // creates links\n  const hist = {}; // (hist)ory of links made\n  // the extra arrays are to influence draw order\n  const links: RVF_ForceLink[] = [];\n  const sLinks: RVF_ForceLink[] = [];\n  const hLinks: RVF_ForceLink[] = [];\n  maps.forEach(map => {\n    Object.entries(map).forEach(([synergy, objMaps]) => {\n      const objs = Object.values(objMaps);\n      for (let i = 0; i < objs.length - 1; i++) {\n        const src = objs[i];\n        const source: string = src[id];\n        if (!hist[source]) {\n          hist[source] = {};\n        }\n        for (let j = i + 1; j < objs.length; j++) {\n          const tgt = objs[j];\n          const target: string = tgt[id];\n          if (hist[source][target]) continue; // drop dup links\n\n          const lProps = linkProps(src, tgt);\n          const rvfLink: RVF_ForceLink = {\n            link: { source, target, value: 4 },\n            className: cx('graph-link', lProps),\n          };\n\n          // TODO, shouldnt expose highlight and selected\n          const __unsafe_lProps = lProps as any;\n          // const linksPtr =\n          //   __unsafe_lProps.highlighted ? hLinks :\n          //     __unsafe_lProps.selected ? sLinks : links;\n          const linksPtr = links;\n\n          linksPtr.push(rvfLink);\n          hist[source][target] = rvfLink; // record link\n        }\n      }\n    });\n  });\n\n  return { nodes, links: links.concat(sLinks).concat(hLinks) };\n}\n\n/// EXPORT TO vx/network\nexport function mapToVxNetwork() {\n\n}\n\n\n/// EXPORT TO react-d3-graph\nfunction setNodeAsSelected(node) {\n  node.color = 'lightgreen';\n  // node.strokeColor = 'forestgreen';\n  node.highlightStrokeColor = 'forestgreen';\n  node.fontSize = 20;\n  node.highlightFontSize = 40;\n}\n\nexport function mapToReactD3Graph(id, objs, allObjMap, maps) {\n  let nodes;\n  if (hideFilter) {\n    nodes = objs.filter(o => o.active)\n  }\n  nodes = nodes.map(o => {\n    const node = {\n      ...o,\n      id: o[id],\n      opacity: o.active ? 1 : 0.3,\n    };\n    if (o.selected) {\n      setNodeAsSelected(node);\n    }\n    return node;\n  });\n\n  const hist = {};\n\n  const links = maps.reduce((lks, map) => {\n    Object.values(map).forEach(objMaps => {\n      const objs = Object.values(objMaps);\n      for (let i = 0; i < objs.length - 1; i++) {\n        const source = objs[i][id];\n        if (!hist[source]) {\n          hist[source] = {};\n        }\n        for (let j = i + 1; j < objs.length; j++) {\n          const target = objs[j][id];\n          if (hist[source][target]) continue;\n          const link = { source, target, opacity: 1 };\n          if (!allObjMap[target].active || !allObjMap[source].active) {\n            if (hideFilter) {\n              continue;\n            }\n            link.opacity = 0.3;\n          }\n          lks.push(link);\n          hist[source][target] = link;\n        }\n      }\n    });\n    return lks;\n  }, []);\n\n  if (nodes.length === 0) {\n    nodes.push({id: '???'});\n  }\n\n  return { nodes, links };\n}\n","import React from 'react';\n\nimport { Champion } from '../models/data.models';\nimport { encodeStr } from '../utils';\n\ninterface ChampionImagesProps {\n  champions: Champion[];\n}\n\n// helper component for svg\nexport function ChampionImages(props: ChampionImagesProps) {\n  const {champions} = props;\n  return (\n    <>\n      {champions.map(c => (\n        <pattern\n          key={c.name}\n          id={encodeStr(c.name)+'-img'}\n          patternUnits=\"objectBoundingBox\"\n          width=\"1\"\n          height=\"1\"\n          x=\"0\"\n          y=\"0\"\n        >\n          <image\n            className=\"node-icon\"\n            href={c.icon}\n            x=\"0\"\n            y=\"0\"\n          />\n        </pattern>\n      ))}\n    </>\n  );\n}\n","// v5\n// third party\nimport React, {\n  useState, useEffect, useLayoutEffect, useMemo, cloneElement\n} from 'react';\nimport Modal from 'react-modal';\nimport {\n  InteractiveForceGraph, ForceGraphNode, ForceGraphLink,ForceGraph\n} from 'react-vis-force';\nimport cx from 'classnames/bind';\nimport * as R from 'ramda';\nimport * as S from 'sanctuary';\nimport * as Centrality from 'ngraph.centrality';\nimport * as NGraph from 'ngraph.graph';\nimport * as d3 from 'd3';\nimport {\n  NavigationView, SplitViewCommand, Button, AppBarButton, CommandBar,\n  AppBarSeparator, FloatNav, SplitView, SplitViewPane, ListView, Separator,\n  TextBox, IconButton\n} from 'react-uwp';\n\n// fundamentals\nimport { index, prop } from '../utils';\nimport { multiKeyToIX, counter } from '../utils/object.utils';\nimport { graphConfig } from './config';\nimport {\n  keys, isChampion, Champion, id,\n  Synergy, SynergyMap, SynergyTypeMap, SynergyType,\n  Item,\n} from '../models/data.models';\nimport {\n  ClientState, pickStateVars, mergeStateVars,\n  SynergyEnrichment,\n  ItemEnrichment, ChampionEnrichment,\n  useClientState,\n} from '../models/client.models';\n\n// loaders\nimport {\n  mapToReactD3Graph, mapToVxNetwork, mapToReactVisForce,\n  mapReactVisForceToNGraph,\n} from './loaders/mapsToGraph';\nimport { jsonToMaps } from './loaders/dataToMaps';\n\n// components\nimport { ChampionList } from '../components/ChampionList';\nimport { SynergyList } from '../components/SynergyList';\nimport { ChampionImages } from '../components/ChampionImages';\nimport { GridNode, GridChartHtml } from '../components/GridChart';\n\n// utility types\nimport { NGraphGraph, CentralityMode } from '../types/ngraph';\n\n// styles\nimport './App.scss';\nimport '../components/GridChart.scss';\n\n// data\nimport * as championsjson from '../data/v3/champions.json';\nimport * as synergiesjson from '../data/v3/synergies.json';\n\n\n// DECLARATIONS\ndeclare global {\n  interface Window {\n    [s: string]: any;\n  }\n}\ndeclare module 'react' {\n  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n    // extends React's HTMLAttributes\n    active?: string|boolean|number;\n  }\n}\n\n// WINDOW GLOBALS\nwindow.R = R;\nwindow.S = S;\nwindow.d3 = d3;\n\n// TYPES\n// type EnrichedSynergy = Synergy & SynergyEnrichment;\n\n/**\n * Naming Convention!\n *   The more important name goes last (like in English)\n *   If it includes the principle object, [modifier][principle name]\n *   If it only includes modifiers,       [principle name][modifier]\n */\n// Augments Champions\ntype ChampionAugment = ClientState & ChampionEnrichment;\n// Incomplete ClientChampion\ntype IncClientChampion = Champion & Partial<ChampionAugment>;\n// Champion structure that the client uses\ntype ClientChampion = Champion & ChampionAugment;\n\ntype IncClientSynergy = Synergy & Partial<SynergyEnrichment>;\n\ntype ClientSynergy = Synergy & SynergyEnrichment;\n\n// GRAPH STUFF\n// const centralityModes: CentralityMode[] = [\n//   'eccentricity',\n//   'degree',\n//   'closeness',\n//   'betweenness',\n// ];\n// const graphColors = d3.scaleSequential(d3.interpolateTurbo);\n\nconst rawChampions = (championsjson as any).default as Champion[];\nconst rawSynergies = (synergiesjson as any).default as Synergy[];\n\nconst cssColorFilter = {\n  gold: 'sepia(100%) hue-rotate(14deg) saturate(7)',\n  silver: 'sepia(100%) hue-rotate(180deg) saturate(.8) brightness(1.3)',\n  bronze: 'sepia(100%) saturate(4) brightness(0.5)',\n  undefined: 'contrast(0.2) brightness(2) invert(1)',\n};\n\n// Gets shortname from name\nfunction getShortName(o: {name: string}) {\n  const {name} = o;\n  return name.replace(/[\\W]/g,'').toLowerCase();\n}\n\n// Gets straits from class and origin\nfunction getTraits(o: {origin: string[], class: string[]}) {\n  return o.class.concat(o.origin);\n}\n\nfunction linkDisplayRules(a: ClientState, b: ClientState):\n    Partial<ClientState> {\n  return {\n    filtered: a.filtered || b.filtered,\n    selected: a.selected && b.selected,\n    grouped: a.grouped && b.grouped,\n    highlighted: (a.highlighted && b.hovered) || (a.hovered && b.highlighted),\n    hovered: false,\n  };\n}\n\n// picks some champion attrs from val and stores in array if exists\nconst pickReducer = (acc, val) => {\n  val.selected && acc.selected.push(val);\n  val.highlighted && acc.highlighted.push(val);\n  val.hovered && acc.hovered.push(val);\n  return acc;\n}\nconst reduceToPicks = R.reduce(pickReducer);\n// Aldia & indexes\n/**\n * Single instance of objects that will be mutated throughout the app to keep\n * allow for one time indexing.\n */\nconst incChampions: IncClientChampion[] = R.clone(rawChampions);\nconst incSynergies: IncClientSynergy[] = R.clone(rawSynergies);\n\nfunction Aldia() {\n  // Benchmarking\n  const start = Date.now();\n\n  // Create ClientChampion from IncClientChampion\n  const champions: ClientChampion[] = R.map(\n    (c: IncClientChampion) => Object.assign(c, {\n      short: getShortName(c),\n      traits: getTraits(c),\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      ...useClientState(prop('name')(c)),\n    }),\n    incChampions,\n  );\n  window.champions = champions;\n\n  const emptyPicks = { selected: [], highlighted: [], hovered: [] };\n  const {\n    selected,\n    highlighted,\n    hovered\n  }:{\n    selected: ClientChampion[],\n    highlighted: ClientChampion[],\n    hovered: ClientChampion[]\n  } = reduceToPicks(emptyPicks, champions);\n\n  const synsCount = selected.flatMap(c => c.traits).reduce(counter, {});\n  const synergies: ClientSynergy[] = R.map(\n    (s: IncClientSynergy) => Object.assign(s, {\n      count: synsCount[s.name],\n      countThreshIdx: s.thresholds.reduce((threshIdx, thresh, i) => {\n        if (synsCount[s.name] >= thresh.min\n            && synsCount[s.name] <= (thresh?.max || Infinity)) {\n          return i;\n        }\n        return threshIdx;\n      }, -1),\n    }),\n    incSynergies,\n  );\n  // need a pick for synergies too\n  const selectedSynergies = R.sort(R.descend(prop('count')),\n      synergies.filter(s => s.count > 0));\n  window.selectedSynergies = selectedSynergies;\n\n\n  // NEEDS TO GET INDEXED\n  const championsByTrait = multiKeyToIX<ClientChampion>(champions,\n      prop('traits'));\n\n  // Champion functionality\n  function toggleSelectChampion(name: string) {\n    const champion = index(champions, prop('name'))[name];\n    if (champion.filtered) {\n      champion.setSelected(false);\n      return;\n    };\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    champion.setSelected(!champion.selected);\n  }\n\n  function relatedChampions(sourceC: ClientChampion): ClientChampion[] {\n    // Lift concat and to accept list of list of champions\n    const traitChampions = R.flatten(\n        R.map(t => championsByTrait[t], sourceC.traits));\n    const uniqTraitChampions = R.uniq(traitChampions);\n    const noSourceChampions = R.filter(\n        c => c.name !== sourceC.name, uniqTraitChampions);\n    return noSourceChampions;\n  }\n\n  function setChampionHighlight(name: string, bool: boolean) {\n    const champion: ClientChampion = index(champions, prop('name'))[name];\n    if (champion.filtered) return;\n    relatedChampions(champion).forEach(c => c.setHighlighted(bool));\n    champion.setHovered(bool);\n  }\n\n  function attachNodeEvents(node) {\n    return cloneElement(node, {\n      onMouseDown: () => toggleSelectChampion(node.props.node.id),\n      onMouseOver: () => setChampionHighlight(node.props.node.id, true),\n      onMouseOut: () => setChampionHighlight(node.props.node.id, false),\n    });\n  }\n\n  // Create nodes and links for react force graph\n  const {nodes, links} = mapToReactVisForce(\n    'name',\n    champions,\n    // cant use index() for this because the key fn would need to return list\n    Object.values(jsonToMaps(id, keys, champions)),\n    R.pipe(pickStateVars),\n    linkDisplayRules\n  );\n\n  // Attach to window for introspection\n  window.nodes = nodes;\n  window.links = links;\n\n  // Attach functionality to nodes\n  const renderedNodes = R.map(R.pipe(\n    forceNode => (<ForceGraphNode key={forceNode.node.id} {...forceNode} />),\n    attachNodeEvents,\n  ), nodes);\n\n  const baseStyle: React.CSSProperties = {\n    height: '-webkit-fill-available',\n  };\n\n  const navigationTopNodes = [\n    <SplitViewCommand icon=\"VPN\" label=\"Graph\" />,\n    <SplitViewCommand icon=\"BarcodeScanner\" label=\"Items\" />,\n    <SplitViewCommand icon=\"People\" label=\"Team\" />,\n  ];\n\n  // Benchmarking\n  process.env.NODE_ENV !== 'production'\n      && console.log('ALDIA RENDER', Date.now() - start);\n  return (\n    <div className=\"app\">\n      <div className=\"top-bar\">\n        <CommandBar\n          labelPosition=\"right\"\n          primaryCommands={[\n            <AppBarButton icon=\"Filter\" label=\"Class\" />,\n            <AppBarButton icon=\"Filter\" label=\"Origin\" />,\n            <AppBarButton icon=\"Filter\" label=\"Tier\" />,\n            <AppBarSeparator />,\n            <AppBarButton icon=\"CircleRing\" label=\"Centrality\" />,\n          ]}\n          style={{}}\n        />\n      </div>\n      <div className=\"left-bar\">\n        <NavigationView\n          style={{height: '-webkit-fill-available'}}\n          pageTitle=\"TFT Set 3\"\n          displayMode=\"overlay\"\n          autoResize={false}\n          initWidth={48}\n          defaultExpanded\n          expandedWidth={160}\n          navigationTopNodes={navigationTopNodes}\n          focusNavigationNodeIndex={0}\n        />\n      </div>\n      <div className=\"right-panel\">\n        <ListView\n          listSource={[\n            {\n              itemNode: <h3>Champions ({selected.length})</h3>,\n              style: {padding: '8px'},\n            },\n            {\n              itemNode: <Separator />,\n              disabled: true,\n            },\n            ...selected.map(c => ({\n              itemNode: <>\n                <IconButton\n                  size={25}\n                  style={{opacity: 0.3}}\n                  hoverStyle={{opacity: 1, color: '#EBD45D'}}\n                  onClick={() => toggleSelectChampion(c.name)}\n                >\n                  Clear\n                </IconButton>\n                <span>\n                  {c.traits.map(t =>\n                    <img\n                      key={t}\n                      style={{height: '24px'}}\n                      src={index(synergies, prop('name'))[t].icon}\n                      title={t}\n                    />)}\n                </span>\n                <h4 style={{marginLeft: 'auto'}}>{c.name}</h4>\n              </>,\n            })),\n            {\n              itemNode: ' ',\n              disabled: true,\n              style: {height: '8px'},\n            },\n          ]}\n          style={{padding: 0, width: '260px'}}\n          listItemStyle={{padding: '0 8px', display: 'flex', alignItems: 'center'}}\n        />\n        <ListView\n          listSource={[\n            {\n              itemNode: <h3>Synergies</h3>,\n              style: {padding: '8px'},\n            },\n            {\n              itemNode: <Separator />,\n              disabled: true,\n            },\n            ...selectedSynergies.map(s => ({\n              itemNode: <>\n                <img\n                  style={{height: '40px', filter: cssColorFilter[s.thresholds[s.countThreshIdx]?.style]}}\n                  src={index(synergies, prop('name'))[s.name].icon}\n                  title={s.name}\n                />\n                <h3 style={{margin: '0 8px 0 4px'}}>{s.count}</h3>\n                <p style={{opacity: 0.4}}>{s.thresholds.map(t => t.min).join(' ')}</p>\n                <h4 style={{marginLeft: 'auto'}}>{s.name}</h4>\n              </>,\n            })),\n            {\n              itemNode: ' ',\n              disabled: true,\n              style: {height: '8px'},\n            },\n          ]}\n          style={{padding: 0, width: '260px'}}\n          listItemStyle={{padding: '0 8px', display: 'flex', alignItems: 'center'}}\n        />\n        {hovered[0] && <ListView\n          listSource={[\n            {\n              itemNode: <h3>{hovered[0].name}</h3>,\n              style: {padding: '8px'},\n            },\n            {\n              itemNode: <Separator />,\n              disabled: true,\n            },\n            {\n              itemNode: <>\n                <p style={{paddingRight: '8px'}}>Class:</p>\n                <h4>{hovered[0].class.join(' ')}</h4>\n              </>\n            },\n            {\n              itemNode: <>\n                <p style={{paddingRight: '8px'}}>Origin:</p>\n                <h4>{hovered[0].origin.join(' ')}</h4>\n              </>\n            },\n            {\n              itemNode: <>\n                <p style={{paddingRight: '8px'}}>Cost:</p>\n                <h4>{hovered[0].cost}</h4>\n              </>\n            },\n            {\n              itemNode: ' ',\n              disabled: true,\n              style: {height: '8px'},\n            },\n          ]}\n          style={{padding: 0, width: '260px'}}\n          listItemStyle={{padding: '0 8px', display: 'flex', alignItems: 'center'}}\n        />\n        }\n      </div>\n      <div id=\"graph\">\n       <ForceGraph\n          showLabels\n          zoom\n          zoomOptions={{\n            maxScale: 1,\n            minScale: 1,\n          }}\n          simulationOptions={{\n            radiusMargin: 36,\n            // strength: { x: -.04, y: -.01 },\n            // animate: true,\n            alphaDecay: .003, // lower the more grouped\n            height: window.innerHeight,\n            width: window.innerWidth,\n          }}\n        >\n          {renderedNodes}\n          {links.map(forceLink => (\n            <ForceGraphLink\n              key={`${forceLink.link.source}=>${forceLink.link.target}`}\n              {...forceLink}\n            />\n          ))}\n          <defs>\n            <ChampionImages champions={champions} />\n          </defs>\n        </ForceGraph>\n      </div>\n    </div>\n  );\n}\n\nexport default Aldia;\n","// maps of json objs by key\n// todo rename to group by key\nexport function jsonToMaps(id, keys, jsonObjs) {\n  return jsonObjs.reduce((maps, obj) => {\n    keys.forEach(key => {\n      [].concat(obj[key]).forEach(val => {\n        if (!maps[key][val]) {\n          maps[key][val] = {};\n        }\n        maps[key][val][obj[id]] = obj;\n      });\n    });\n    return maps;\n  }, keys.reduce((m, k) => ({ ...m, [k]: {} }), {}));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Aldia from './Aldia';\nimport * as serviceWorker from './serviceWorker';\nimport { Theme, getTheme } from \"react-uwp/Theme\";\n\nReactDOM.render(\n  <Theme\n    theme={getTheme({\n      themeName: \"dark\", // set custom theme\n      accent: \"#614AA1\", // set accent color\n      useFluentDesign: true, // sure you want use new fluent design.\n    })}\n  >\n    <Aldia />\n  </Theme>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}